openapi: 3.0.0
paths:
  /dev/api:
    get:
      operationId: AppController_getHello
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
  /dev/api/signin:
    post:
      operationId: AuthController_signin
      summary: Войти в систему
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInRequestBody'
      responses:
        '201':
          description: Успешный вход в систему
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SigninResponseBodyOK'
        '401':
          description: Неверное имя пользователя или пароль
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SigninResponseBodyNotOK'
      tags: &ref_0
        - auth
  /dev/api/signup:
    post:
      operationId: AuthController_signup
      summary: Регистрация
      parameters:
        - name: ref
          required: true
          in: query
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequestBody'
      responses:
        '201':
          description: Успешная регистрация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SigninResponseBodyOK'
        '400':
          description: Некорректные данные
        '409':
          description: Аккаунт уже существует
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupResponseBodyNotOK'
      tags: *ref_0
  /dev/api/refresh-token:
    post:
      operationId: AuthController_refreshToken
      summary: Обновить токен
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequestBody'
      responses:
        '201':
          description: accessToken успешно обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/refreshTokenResponseBodyOK'
        '401':
          description: Невалидный refreshToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/refreshTokenResponseBodyNotOK'
      tags: *ref_0
  /dev/api/yandex/exchange:
    post:
      operationId: AuthController_exchangeCodeYandex
      summary: Авторизация через Yandex
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CodeFlowAuthRequestBody'
      responses:
        '201':
          description: Успешная регистрация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SigninResponseBodyOK'
      tags: *ref_0
  /dev/api/mailru/exchange:
    post:
      operationId: AuthController_exchangeCodeMail
      summary: Авторизация через Mail
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CodeFlowAuthRequestBody'
      responses:
        '201':
          description: Успешная регистрация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SigninResponseBodyOK'
      tags: *ref_0
  /dev/api/vkontakte:
    get:
      operationId: AuthController_vkontakteAuth
      summary: Авторизация через Вконтакте
      parameters: []
      responses:
        '200':
          description: Успешная регистрация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SigninResponseBodyOK'
      tags: *ref_0
  /dev/api/google:
    get:
      operationId: AuthController_googleAuth
      summary: Авторизация через Google
      parameters: []
      responses:
        '200':
          description: Успешная регистрация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SigninResponseBodyOK'
      tags: *ref_0
  /dev/api/telegram:
    post:
      operationId: AuthController_telegramCallback
      parameters: []
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
      tags: *ref_0
  /dev/api/reset-password:
    post:
      operationId: AuthController_resetPassword
      summary: Сброс пароля
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequestBody'
      responses:
        '201':
          description: Ссылка для сброса пароля отправлена на указанный Email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPasswordResponseBodyOK'
        '400':
          description: Некорректные данные
        '404':
          description: Пользователь с указанным Email не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPasswordResponseBodyNotFound'
      tags: *ref_0
  /dev/api/profiles:
    get:
      operationId: ProfilesController_findAll
      summary: Получить все профили
      parameters: []
      responses:
        '200':
          description: Профили успешно получены
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProfileResponseBodyOK'
        '403':
          description: Отказ в доступе
        '404':
          description: Ресурс не найден
      tags: &ref_1
        - profiles
      security: &ref_3
        - &ref_2
          bearer: []
  /dev/api/profiles/me:
    get:
      operationId: ProfilesController_findProfileByToken
      summary: Получить текущий профиль
      parameters:
        - name: authorization
          required: true
          in: header
          description: Access токен
          schema:
            type: string
      responses:
        '200':
          description: Профиль успешно получен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponseBodyOK'
        '403':
          description: Отказ в доступе
        '404':
          description: Ресурс не найден
      tags: *ref_1
      security:
        - *ref_2
        - bearer: []
  /dev/api/profiles/shared:
    post:
      operationId: ProfilesController_sharedAccess
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSharedAccessDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                type: object
      tags: *ref_1
      security: *ref_3
    get:
      operationId: ProfilesController_findAllGrantedAccesses
      summary: Получить все выданные доступы профиля
      parameters:
        - name: authorization
          in: header
          description: Access токен
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Доступы успешно получены
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Access'
        '403':
          description: Отказ в доступе
        '404':
          description: Ресурс не найден
      tags: *ref_1
      security:
        - *ref_2
        - bearer: []
    patch:
      operationId: ProfilesController_updateAccesses
      summary: Обновить выданный доступ
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSharedAccessDto'
      responses:
        '200':
          description: Профиль успешно обновлен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Access'
        '400':
          description: Неверный запрос
        '403':
          description: Отказ в доступе
        '404':
          description: Ресурс не найден
      tags: *ref_1
      security: *ref_3
  /dev/api/profiles/{id}:
    get:
      operationId: ProfilesController_findOne
      summary: Получить профиль по id
      parameters:
        - name: id
          required: true
          in: path
          description: Идентификатор профиля
          example: 64f81ba37571bfaac18a857f
          schema:
            type: string
      responses:
        '200':
          description: Профиль успешно получен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponseBodyOK'
        '403':
          description: Отказ в доступе
        '404':
          description: Ресурс не найден
      tags: *ref_1
      security: *ref_3
    patch:
      operationId: ProfilesController_update
      summary: Обновить данные профиля по id
      parameters:
        - name: id
          required: true
          in: path
          description: Идентификатор профиля
          example: 64f81ba37571bfaac18a857f
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileDto'
      responses:
        '200':
          description: Профиль успешно обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponseBodyOK'
        '400':
          description: Неверный запрос
        '403':
          description: Отказ в доступе
        '404':
          description: Ресурс не найден
      tags: *ref_1
      security: *ref_3
    delete:
      operationId: ProfilesController_remove
      summary: Удалить профиль по id
      parameters:
        - name: id
          required: true
          in: path
          description: Идентификатор профиля
          example: 64f81ba37571bfaac18a857f
          schema:
            type: string
      responses:
        '200':
          description: Профиль успешно удален
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponseBodyOK'
        '403':
          description: Отказ в доступе
        '404':
          description: Ресурс не найден
      tags: *ref_1
      security: *ref_3
  /dev/api/profiles/{id}/accounts:
    get:
      operationId: ProfilesController_findAccountByProfileId
      summary: Получить все аккаунты пользователя по id профиля
      parameters:
        - name: id
          required: true
          in: path
          description: Идентификатор профиля
          example: 64f81ba37571bfaac18a857f
          schema:
            type: string
      responses:
        '200':
          description: Аккаунты профиля успешно получены
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SingleAccountResponseBodyOK'
        '403':
          description: Отказ в доступе
        '404':
          description: Ресурс не найден
      tags: *ref_1
      security: *ref_3
  /dev/api/tariffs:
    get:
      operationId: TariffsController_findAllTariffs
      summary: Получить все тарифы
      parameters: []
      responses:
        '200':
          description: Тарифы успешно получены
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tariff'
        '403':
          description: Отказ в доступе
      tags: &ref_4
        - tariffs
      security: &ref_5
        - bearer: []
    post:
      operationId: TariffsController_createTariff
      summary: Добавить новый тариф
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTariffDto'
      responses:
        '201':
          description: Тариф успешно добавлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tariff'
        '400':
          description: Неверный запрос
        '403':
          description: Отказ в доступе
        '409':
          description: Такой тариф уже существует
      tags: *ref_4
      security: *ref_5
  /dev/api/tariffs/{id}:
    get:
      operationId: TariffsController_findTariffToId
      summary: Получить тариф по id
      parameters:
        - name: id
          required: true
          in: path
          description: Идентификатор тарифа
          example: 64f81ba37571bfaac18a857f
          schema:
            type: string
      responses:
        '200':
          description: Тариф успешно получен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tariff'
        '403':
          description: Отказ в доступе
        '404':
          description: Ресурс не найден
      tags: *ref_4
      security: *ref_5
    patch:
      operationId: TariffsController_updateTariff
      summary: Изменить данные тарифа по id
      parameters:
        - name: id
          required: true
          in: path
          description: Идентификатор тарифа
          example: 64f81ba37571bfaac18a857f
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTariffDto'
      responses:
        '200':
          description: Тариф успешно изменен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tariff'
        '400':
          description: Неверный запрос
        '403':
          description: Отказ в доступе
        '404':
          description: Ресурс не найден
      tags: *ref_4
      security: *ref_5
    delete:
      operationId: TariffsController_removeTariff
      summary: Удалить тариф по id
      parameters:
        - name: id
          required: true
          in: path
          description: Идентификатор тарифа
          example: 64f81ba37571bfaac18a857f
          schema:
            type: string
      responses:
        '200':
          description: Тариф успешно удален
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tariff'
        '403':
          description: Отказ в доступе
        '404':
          description: Ресурс не найден
      tags: *ref_4
      security: *ref_5
  /dev/api/accounts:
    get:
      operationId: AccountsController_findAll
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
      tags: &ref_6
        - accounts
      security: &ref_7
        - bearer: []
  /dev/api/accounts/{id}:
    patch:
      operationId: AccountsController_update
      summary: Обновить данные аккаунта по id
      parameters:
        - name: id
          required: true
          in: path
          description: Индификатор аккаунта
          example: 64f81ba37571bfaac18a857f
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountUpdateRequestBody'
      responses:
        '200':
          description: Аккаунт успешно обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleAccountResponseBodyOK'
        '400':
          description: Неверный запрос
        '403':
          description: Отказ в доступе
        '404':
          description: Ресурс не найден
      tags: *ref_6
      security: *ref_7
  /dev/api/partnership:
    get:
      operationId: PartnershipController_redirectToPage
      parameters:
        - name: ref
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags: &ref_8
        - partnership
  /dev/api/partnership/statistic:
    get:
      operationId: PartnershipController_getStatistic
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
      tags: *ref_8
      security:
        - bearer: []
  /dev/api/payments:
    get:
      operationId: PaymentsController_userPayments
      summary: История платежей
      parameters: []
      responses:
        '200':
          description: История платежей успешно получена
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
        '403':
          description: Отказ в доступе
      tags: &ref_9
        - payments
      security: &ref_10
        - bearer: []
    post:
      operationId: PaymentsController_create
      summary: Добавить данные финансовой операции
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePaymentDto'
      responses:
        '201':
          description: Операция успешно добавлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '400':
          description: Неверный запрос
        '403':
          description: Отказ в доступе
      tags: *ref_9
      security: *ref_10
  /dev/api/payments/{id}:
    delete:
      operationId: PaymentsController_delete
      summary: Удалить финансовую операцию
      parameters:
        - name: id
          required: true
          in: path
          description: Идентификатор фин.операции
          example: 64f81ba37571bfaac18a857f
          schema:
            type: string
      responses:
        '200':
          description: Операция успешно удалена
        '403':
          description: Отказ в доступе
        '404':
          description: Ресурс не найден
      tags: *ref_9
      security: *ref_10
    patch:
      operationId: PaymentsController_update
      summary: Обновить данные финансовой операции
      parameters:
        - name: id
          required: true
          in: path
          description: Идентификатор фин.операции
          example: 64f81ba37571bfaac18a857f
          schema:
            type: string
      responses:
        '200':
          description: Операция успешно обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '400':
          description: Неверный запрос
        '403':
          description: Отказ в доступе
        '404':
          description: Ресурс не найден
      tags: *ref_9
      security: *ref_10
  /dev/api/logout:
    get:
      operationId: BlacklistTokensController_addToken
      summary: Разлогинить пользователя
      parameters:
        - name: authorization
          required: true
          in: header
          description: Access токен
          schema:
            type: string
      responses:
        '200':
          description: Пользователь успешно разлогинен
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Сообщение об успешном разлогине
      tags:
        - logout
      security:
        - bearer: []
  /dev/api/subscriptions:
    get:
      operationId: SubscriptionsController_subscriptionAndPayments
      summary: Данные страницы "Подписка и платежи"
      parameters: []
      responses:
        '200':
          description: Данные подписок и платежей успешно получены
          content:
            application/json:
              schema:
                type: object
                properties:
                  tariff:
                    type: string
                    example: Бизнес
                  status:
                    type: boolean
                    example: true
                  cardMask:
                    type: string
                    example: 4500 *** 1119
                  debitDate:
                    type: date
                    example: '2023-09-12'
                  balance:
                    type: number
                    example: 1234
                  payments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Payment'
        '403':
          description: Отказ в доступе
        '404':
          description: Ресурс не найден
      tags: &ref_11
        - subscriptions
      security: &ref_12
        - bearer: []
  /dev/api/subscriptions/activate:
    post:
      operationId: SubscriptionsController_activateSubscription
      summary: Активировать(отменить) подписку
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivateSubscriptionDTO'
      responses:
        '201':
          description: Подписка активирована
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '400':
          description: Неверный запрос
        '403':
          description: Отказ в доступе
        '404':
          description: Ресурс не найден
      tags: *ref_11
      security: *ref_12
  /dev/api/subscriptions/{tariffId}:
    post:
      operationId: SubscriptionsController_createSubscription
      summary: Оформить подписку
      parameters:
        - name: tariffId
          required: true
          in: path
          description: Идентификатор тарифа
          example: 64f81ba37571bfaac18a857f
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cardMask:
                  type: string
                  example: 4500 *** 1119
                debitDate:
                  type: date
                  example: '2023-09-12'
      responses:
        '201':
          description: Подписка оформлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '400':
          description: Неверный запрос
        '403':
          description: Отказ в доступе
        '404':
          description: Ресурс не найден
      tags: *ref_11
      security: *ref_12
  /dev/api/platforms:
    post:
      operationId: PlatformController_create
      summary: Создать новую платформу
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePlatformDto'
      responses:
        '201':
          description: Платформа успешно создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Platform'
        '400':
          description: Неверный запрос
        '403':
          description: Отказ в доступе
      tags: &ref_13
        - platforms
      security: &ref_14
        - bearer: []
    get:
      operationId: PlatformController_findAll
      summary: Получить все платформы
      parameters: []
      responses:
        '200':
          description: Платформы успешно получены
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Platform'
        '403':
          description: Отказ в доступе
      tags: *ref_13
      security: *ref_14
  /dev/api/platforms/{id}:
    get:
      operationId: PlatformController_findOne
      summary: Получить платформу по id
      parameters:
        - name: id
          required: true
          in: path
          description: Идентиификатор платформы
          example: 64f81ba37571bfaac18a857f
          schema:
            type: string
      responses:
        '200':
          description: Платформа успешно получена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Platform'
        '403':
          description: Отказ в доступе
        '404':
          description: Ресурс не найден
      tags: *ref_13
      security: *ref_14
    patch:
      operationId: PlatformController_update
      summary: Обновить данные о платформе по id
      parameters:
        - name: id
          required: true
          in: path
          description: Идентификатор платформы
          example: 64f81ba37571bfaac18a857f
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePlatformDto'
      responses:
        '200':
          description: Платформа успешно обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Platform'
        '400':
          description: Неверный запрос
        '403':
          description: Отказ в доступе
        '404':
          description: Ресурс не найден
      tags: *ref_13
      security: *ref_14
    delete:
      operationId: PlatformController_remove
      summary: Удалить платформу по id
      parameters:
        - name: id
          required: true
          in: path
          description: Идентификатор платформы
          example: 64f81ba37571bfaac18a857f
          schema:
            type: string
      responses:
        '200':
          description: Платформа успешно удалена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Platform'
        '403':
          description: Отказ в доступе
        '404':
          description: Ресурс не найден
      tags: *ref_13
      security: *ref_14
  /dev/api/promocodes:
    post:
      operationId: PromocodesController_create
      summary: Добавить новый промокод
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePromocodeDto'
      responses:
        '201':
          description: Промокод успешно добавлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Promocode'
        '403':
          description: Отказ в доступе
        '409':
          description: Такой промокод уже существует
      tags: &ref_15
        - promocodes
      security: &ref_16
        - bearer: []
    get:
      operationId: PromocodesController_findAll
      summary: Получить все промокоды
      parameters: []
      responses:
        '200':
          description: Промокоды успешно получены
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Promocode'
        '403':
          description: Отказ в доступе
      tags: *ref_15
      security: *ref_16
  /dev/api/promocodes/promocode:
    get:
      operationId: PromocodesController_findOneByCode
      summary: Получить промокод по названию
      parameters:
        - name: code
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Промокод успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Promocode'
        '403':
          description: Отказ в доступе
      tags: *ref_15
      security: *ref_16
    patch:
      operationId: PromocodesController_updateByCode
      summary: Использовать промокод 1 раз
      parameters:
        - name: code
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Промокод успешно обновлен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Promocode'
        '403':
          description: Отказ в доступе
      tags: *ref_15
      security: *ref_16
  /dev/api/promocodes/{id}:
    get:
      operationId: PromocodesController_findOne
      summary: Получить промокод по id
      parameters:
        - name: id
          required: true
          in: path
          description: Идентификатор промокода
          example: 64f81ba37571bfaac18a857f
          schema:
            type: string
      responses:
        '200':
          description: Промокод успешно получен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Promocode'
        '403':
          description: Отказ в доступе
        '404':
          description: Ресурс не найден
      tags: *ref_15
      security: *ref_16
    patch:
      operationId: PromocodesController_update
      summary: Изменить данные промокода по id
      parameters:
        - name: id
          required: true
          in: path
          description: Идентификатор промокода
          example: 64f81ba37571bfaac18a857f
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePromocodeDto'
      responses:
        '200':
          description: Данные промокода успешно изменены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Promocode'
        '400':
          description: Неверный запрос
        '403':
          description: Отказ в доступе
        '404':
          description: Ресурс не найден
      tags: *ref_15
      security: *ref_16
    delete:
      operationId: PromocodesController_remove
      summary: Удалить промокод по id
      parameters:
        - name: id
          required: true
          in: path
          description: Идентификатор промокода
          example: 64f81ba37571bfaac18a857f
          schema:
            type: string
      responses:
        '200':
          description: Промокод успешно удален
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Promocode'
        '403':
          description: Отказ в доступе
        '404':
          description: Ресурс не найден
      tags: *ref_15
      security: *ref_16
  /dev/api/bots:
    get:
      operationId: BotsController_findMy
      summary: Получить ботов пользователя
      parameters: []
      responses:
        '200':
          description: Запрос выполнен успешно
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bot'
        '403':
          description: Отказ в доступе
        '404':
          description: Ресурс не найден
      tags: &ref_17
        - bots
      security: &ref_18
        - bearer: []
    post:
      operationId: BotsController_create
      summary: Создание нового бота
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BotCreateRequestBody'
      responses:
        '201':
          description: Новый бот создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bot'
        '400':
          description: Неверный запрос
        '403':
          description: Отказ в доступе
      tags: *ref_17
      security: *ref_18
  /dev/api/bots/templates:
    get:
      operationId: BotsController_findTemplates
      summary: Получить все шаблоны бота
      parameters: []
      responses:
        '200':
          description: Запрос выполнен успешно
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bot'
        '403':
          description: Отказ в доступе
        '404':
          description: Ресурс не найден
      tags: *ref_17
      security: *ref_18
  /dev/api/bots/template:
    post:
      operationId: BotsController_createTemplate
      summary: Добавление шаблона бота админом
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTemplateDto'
      responses:
        '200':
          description: Созданный шаблон
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bot'
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bot'
      tags: *ref_17
      security: *ref_18
  /dev/api/bots/template/{id}:
    patch:
      operationId: BotsController_updateTemplate
      summary: Обновление шаблона бота админом
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTemplateDto'
      responses:
        '200':
          description: Обновленны шаблон бгота
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bot'
      tags: *ref_17
      security: *ref_18
    delete:
      operationId: BotsController_removeTemplate
      summary: Удаление шаблона бота
      parameters:
        - name: id
          required: true
          in: path
          description: Идентификатор шаблона
          example: 64f81ba37571bfaac18a857f
          schema:
            type: string
      responses:
        '200':
          description: Шаблон удален
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bot'
        '404':
          description: Ресурс не найден
      tags: *ref_17
      security: *ref_18
    get:
      operationId: BotsController_getTemplate
      summary: Получение шаблона бота по id
      parameters:
        - name: id
          required: true
          in: path
          description: Идентификатор шаблона
          example: 64f81ba37571bfaac18a857f
          schema:
            type: string
      responses:
        '200':
          description: Шаблон найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bot'
        '404':
          description: Ресурс не найден
      tags: *ref_17
      security: *ref_18
  /dev/api/bots/bot/{id}:
    get:
      operationId: BotsController_findOneBotWithAccess
      summary: Получить данные бота по Id с правами
      parameters:
        - name: id
          required: true
          in: path
          description: Идентификатор бота
          example: 64f81ba37571bfaac18a857f
          schema:
            type: string
      responses:
        '200':
          description: Информация о боте по Id получена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bot'
        '403':
          description: Отказ в доступе
        '404':
          description: Ресурс не найден
      tags: *ref_17
      security: *ref_18
  /dev/api/bots/{id}:
    get:
      operationId: BotsController_findOne
      summary: Получить данные бота по Id
      parameters:
        - name: id
          required: true
          in: path
          description: Идентификатор бота
          example: 64f81ba37571bfaac18a857f
          schema:
            type: string
      responses:
        '200':
          description: Информация о боте по Id получена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bot'
        '403':
          description: Отказ в доступе
        '404':
          description: Ресурс не найден
      tags: *ref_17
      security: *ref_18
    post:
      operationId: BotsController_createBotsFromTemplate
      summary: Создание нового бота из шаблона
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BotCreateRequestBody'
      responses:
        '201':
          description: Новый бот создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bot'
        '400':
          description: Неверный запрос
        '403':
          description: Отказ в доступе
      tags: *ref_17
      security: *ref_18
    delete:
      operationId: BotsController_remove
      summary: Удаление бота
      parameters:
        - name: id
          required: true
          in: path
          description: Идентификатор бота
          example: 64f81ba37571bfaac18a857f
          schema:
            type: string
      responses:
        '200':
          description: Бот удален
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bot'
        '403':
          description: Отказ в доступе
        '404':
          description: Ресурс не найден
      tags: *ref_17
      security: *ref_18
    patch:
      operationId: BotsController_update
      summary: Обновить бота
      parameters:
        - name: id
          required: true
          in: path
          description: Идентификатор бота
          example: 64f81ba37571bfaac18a857f
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BotCreateRequestBody'
      responses:
        '200':
          description: Имя бота обновлено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bot'
        '403':
          description: Отказ в доступе
        '404':
          description: Ресурс не найден
      tags: *ref_17
      security: *ref_18
  /dev/api/bots/{id}/share:
    post:
      operationId: BotsController_share
      summary: Предоставить общий доступ к боту, первичный доступ при отправке email
      parameters:
        - name: id
          required: true
          in: path
          description: Идентификатор бота
          example: 64f81ba37571bfaac18a857f
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShareBotDto'
      responses:
        '201':
          description: Первичный доступ создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bot'
        '400':
          description: Неверный запрос
        '403':
          description: Отказ в доступе
        '404':
          description: Ресурс не найден
      tags: *ref_17
      security: *ref_18
  /dev/api/bots/copy/{id}:
    post:
      operationId: BotsController_copyBot
      summary: Копирование бота
      parameters:
        - name: id
          required: true
          in: path
          description: Идентификатор бота
          example: 64f81ba37571bfaac18a857f
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CopyBotDto'
      responses:
        '201':
          description: Бот скопирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bot'
        '400':
          description: Неверный запрос
        '403':
          description: Отказ в доступе
        '404':
          description: Ресурс не найден
      tags: *ref_17
      security: *ref_18
  /dev/api/statistics:
    get:
      operationId: StatisticsController_findAll
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Statistics'
  /dev/api/notification:
    post:
      operationId: NotificationController_create
      summary: Создать уведомление
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNotificationDto'
      responses:
        '201':
          description: Уведомление успешно создано
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateNotificationDto'
        '400':
          description: Неверный запрос
        '403':
          description: Отказ в доступе
      tags: &ref_19
        - notification
      security: &ref_20
        - bearer: []
    get:
      operationId: NotificationController_getAll
      summary: Все уведомления
      parameters: []
      responses:
        '200':
          description: Уведомления успешно получены
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
        '403':
          description: Отказ в доступе
      tags: *ref_19
      security: *ref_20
  /dev/api/notification/{id}:
    get:
      operationId: NotificationController_findOne
      summary: Получить уведомление по id
      parameters:
        - name: id
          required: true
          in: path
          description: Идентификатор уведомления
          example: 64f81ba37571bfaac18a857f
          schema:
            type: string
      responses:
        '200':
          description: Уведомление успешно получено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        '403':
          description: Отказ в доступе
        '404':
          description: Ресурс не найден
      tags: *ref_19
      security: *ref_20
    delete:
      operationId: NotificationController_remove
      summary: Удалить уведомление
      parameters:
        - name: id
          required: true
          in: path
          description: Идентификатор уведомления
          example: 64f81ba37571bfaac18a857f
          schema:
            type: string
      responses:
        '200':
          description: Уведомление успешно удалено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        '403':
          description: Отказ в доступе
        '404':
          description: Ресурс не найден
      tags: *ref_19
      security: *ref_20
    patch:
      operationId: NotificationController_update
      summary: Изменить уведомление
      parameters:
        - name: id
          required: true
          in: path
          description: Идентификатор уведомления
          example: 64f81ba37571bfaac18a857f
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNotificationDto'
      responses:
        '200':
          description: Уведомление успешно изменено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateNotificationDto'
        '400':
          description: Неверный запрос
        '403':
          description: Отказ в доступе
        '404':
          description: Ресурс не найден
      tags: *ref_19
      security: *ref_20
  /dev/api/notification/{id}/status:
    patch:
      operationId: NotificationController_updateStatus
      summary: Изменить статус уведомления
      parameters:
        - name: id
          required: true
          in: path
          description: Идентификатор уведомления
          example: 64f81ba37571bfaac18a857f
          schema:
            type: string
      responses:
        '200':
          description: Статус уведомления успешно изменен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        '403':
          description: Отказ в доступе
        '404':
          description: Ресурс не найден
      tags: *ref_19
      security: *ref_20
info:
  title: API BotKits
  description: Ручки для команды frontend
  version: '1.0'
  contact: {}
tags:
  - name: auth
    description: Авторизация пользователей
  - name: accounts
    description: Аккаунты пользователей
  - name: profiles
    description: Профили пользователей
  - name: bots
    description: Боты
  - name: botAccesses
    description: Управление доступами к ботам
  - name: platforms
    description: Подключаемые платформы
  - name: tariffs
    description: Тарифы работы с площадкой
  - name: subscriptions
    description: Подписки пользователей на тарифы
  - name: payments
    description: Платежи пользователей
  - name: promocodes
    description: Промокоды
  - name: notification
    description: Уведомления пользователей
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    SignInRequestBody:
      type: object
      properties:
        email:
          type: string
          example: test@mail.ru
          description: Почта пользователя
        password:
          type: string
          example: '123'
          description: Пароль пользователя
      required:
        - email
        - password
    SigninResponseBodyOK:
      type: object
      properties:
        _id:
          type: string
          example: 650b396ed4201e5ca499f3b5
        type:
          type: string
          example: local
        role:
          type: string
          example: user
        credentials:
          type: object
          example:
            email: test@mail.ru
            accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
            refreshToken: eyJhbGciOiJIUzI1NiIsInR5cPCI6IkpXVCJ9
        profile:
          type: object
          example:
            _id: 650b396dd4201e5ca499f3b3
            username: test
            phone: '+79999999999'
            avatar: https://i.pravatar.cc/300
            balance: 0
            visited_ref: 0
            registration_ref: 0
            success: true
        success:
          type: boolean
          example: true
      required:
        - credentials
        - profile
    SigninResponseBodyNotOK:
      type: object
      properties:
        message:
          type: string
          example: Неверное имя пользователя или пароль
          description: Сообщение об ошибке
        error:
          type: string
          example: Unauthorized
          description: Тип ошибки
        statusCode:
          type: number
          example: 401
          description: HTTP-статус код
    SignUpRequestBody:
      type: object
      properties:
        password:
          type: string
          example: '123'
          description: Пароль пользователя
        email:
          type: string
          example: test@mail.ru
          description: Email пользователя
        phone:
          type: string
          example: '+79999999999'
          description: Телефонный номер пользователя
        username:
          type: string
          example: test
          description: Имя пользователя
      required:
        - password
        - email
        - phone
        - username
    SignupResponseBodyNotOK:
      type: object
      properties:
        message:
          type: string
          example: Аккаунт уже существует
          description: Сообщение об ошибке
        error:
          type: string
          example: Conflict
          description: Тип ошибки
        statusCode:
          type: number
          example: 409
          description: HTTP-статус код
    RefreshRequestBody:
      type: object
      properties:
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
          description: Выданный рефреш токен
      required:
        - refreshToken
    refreshTokenResponseBodyOK:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
          description: accessToken по умолчанию действует 1 день
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
          description: refreshToken по умолчанию действует 7 день
    refreshTokenResponseBodyNotOK:
      type: object
      properties:
        message:
          type: string
          example: Невалидный refreshToken
          description: Сообщение об ошибке
        error:
          type: string
          example: Unauthorized
          description: Тип ошибки
        statusCode:
          type: number
          example: 401
          description: HTTP-статус код
    CodeFlowAuthRequestBody:
      type: object
      properties:
        codeAuth:
          type: string
          example: '432532'
          description: Код авторизации yandex
      required:
        - codeAuth
    Account:
      type: object
      properties: {}
    ResetPasswordRequestBody:
      type: object
      properties:
        email:
          type: string
          example: test@mail.ru
          description: Почта пользователя
      required:
        - email
    ResetPasswordResponseBodyOK:
      type: object
      properties:
        message:
          type: string
          example: 'Ссылка на сброс пароля отправлена на ваш email: test@mail.ru'
          description: Сообщение об успешном сбросе пароля
    ResetPasswordResponseBodyNotFound:
      type: object
      properties:
        message:
          type: string
          example: Пользователь с указанным Email не найден
          description: Сообщение об ошибке
        error:
          type: string
          example: Not Found
          description: Тип ошибки
        statusCode:
          type: number
          example: 404
          description: HTTP-статус код
    UserProfileResponseBodyOK:
      type: object
      properties:
        _id:
          type: string
          example: 65196b9715b55bd51b039144
          description: ' '
        username:
          type: string
          example: test
          description: ' '
        phone:
          type: string
          example: '+79999999999'
          description: ' '
        avatar:
          type: string
          example: https://i.pravatar.cc/300
          description: ' '
        balance:
          type: number
          example: 0
          description: ' '
        accounts:
          type: array
          example:
            - 65196b9715b55bd51b039144
        success:
          type: boolean
          example: true
      required:
        - _id
        - username
        - phone
        - avatar
        - balance
        - accounts
    CreateSharedAccessDto:
      type: object
      properties:
        email:
          type: string
          description: email
          example: test@mail.ru
      required:
        - email
    Access:
      type: object
      properties: {}
    UpdateSharedAccessDto:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/Access'
      required:
        - access
    SingleAccountResponseBodyOK:
      type: object
      properties:
        _id:
          type: string
          example: 6516ab8f2c612e8cce53e45f
        type:
          type: string
          example: local
        role:
          type: string
          example: user
        credentials:
          type: object
          example:
            email: test@mail.ru
            accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
            refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
        profile:
          type: string
          example: 6516ab8f2c612e8cce53e45d
        success:
          type: boolean
          example: true
      required:
        - credentials
    UpdateProfileDto:
      type: object
      properties: {}
    Tariff:
      type: object
      properties:
        name:
          type: string
          example: Старт
        price:
          type: number
          example: 390
        botsCount:
          type: number
          example: 100
        subscribersCount:
          type: number
          example: 2120
        duration:
          type: string
          example: 1M
        status:
          type: boolean
          example: Активен
      required:
        - name
        - price
        - botsCount
        - subscribersCount
        - duration
        - status
    CreateTariffDto:
      type: object
      properties:
        name:
          type: string
          example: Старт
        price:
          type: number
          minimum: 0
          example: 390
        botsCount:
          type: number
          minimum: 1
        subscribersCount:
          type: number
          minimum: 1
        duration:
          type: string
        status:
          type: boolean
        isStarted:
          type: boolean
        isDemo:
          type: boolean
      required:
        - name
        - price
        - botsCount
        - subscribersCount
        - duration
        - status
        - isStarted
    UpdateTariffDto:
      type: object
      properties: {}
    AccountUpdateRequestBody:
      type: object
      properties:
        type:
          type: string
          example: local
        role:
          type: string
          example: user
        credentials:
          type: object
          example:
            email: test@mail.ru
      required:
        - credentials
    Payment:
      type: object
      properties:
        date:
          format: date-time
          type: string
          example: 2024-02-03T16:28:49.692Z
        amount:
          type: number
          example: 1000
        successful:
          type: boolean
          example: true
        operation:
          type: string
          enum:
            - Поступление
            - Списание
          example: Поступление
        note:
          type: string
          example: Пополнение счета
          default: '-'
      required:
        - date
        - amount
        - successful
        - operation
        - note
    Profile:
      type: object
      properties:
        username:
          type: string
          example: Ivan Ivanov
        phone:
          type: string
          example: '+79501364578'
        avatar:
          type: string
          example: https://i.pravatar.cc/300
        balance:
          type: number
          example: 1400
        partner_ref:
          type: string
          example: '0000000'
        visited_ref:
          type: number
          example: 0
        registration_ref:
          type: number
          example: 0
        accounts:
          type: array
          items:
            type: string
      required:
        - username
        - phone
        - avatar
        - balance
        - partner_ref
        - visited_ref
        - registration_ref
        - accounts
    CreatePaymentDto:
      type: object
      properties:
        date:
          format: date-time
          type: string
          example: '2023-01-03'
        amount:
          type: number
          example: '1234'
        successful:
          type: boolean
          example: true
        operation:
          enum:
            - Поступление
            - Списание
          type: string
          example: Поступление
        note:
          type: string
          example: Пополнение счета
        profile:
          $ref: '#/components/schemas/Profile'
      required:
        - date
        - amount
        - successful
        - operation
        - note
    ActivateSubscriptionDTO:
      type: object
      properties:
        status:
          type: boolean
          example: true
      required:
        - status
    Subscription:
      type: object
      properties:
        status:
          type: boolean
          example: true
          default: false
        cardMask:
          type: string
          example: 4500 *** 1119
        debitDate:
          format: date-time
          type: string
          example: 2024-02-03T16:28:49.701Z
        isCancelled:
          type: boolean
          example: false
          default: false
      required:
        - status
        - cardMask
        - debitDate
        - isCancelled
    FormFields:
      type: object
      properties:
        name:
          type: boolean
          example: true
        pages:
          type: boolean
          example: true
        accessKey:
          type: boolean
          example: false
        url:
          type: boolean
          example: true
      required:
        - name
        - pages
        - accessKey
        - url
    CreatePlatformDto:
      type: object
      properties:
        icon:
          type: string
          example: >-
            https://cdn.icon-icons.com/icons2/1233/PNG/512/1492718766-vk_83600.png
        title:
          type: string
          example: VK
        formFields:
          $ref: '#/components/schemas/FormFields'
      required:
        - icon
        - title
        - formFields
    Platform:
      type: object
      properties: {}
    UpdatePlatformDto:
      type: object
      properties: {}
    CreatePromocodeDto:
      type: object
      properties:
        code:
          type: string
          example: PROMO50
        actionPeriod:
          format: date-time
          type: string
          example: '2023-09-10T16:07:34.285Z'
        activationCount:
          type: number
          minimum: 0
          example: 2
        maxActivationCount:
          type: number
          minimum: 1
          example: 10
        amount:
          type: number
          minimum: 1
          example: 1500
      required:
        - code
        - actionPeriod
        - activationCount
        - maxActivationCount
        - amount
    Promocode:
      type: object
      properties:
        code:
          type: string
          example: PROMO50
        actionPeriod:
          format: date-time
          type: string
          example: '2023-09-10T16:07:34.285Z'
        activationCount:
          type: number
          example: 2
        maxActivationCount:
          type: number
          example: 10
        amount:
          type: number
          example: 1500
      required:
        - code
        - actionPeriod
        - activationCount
        - maxActivationCount
        - amount
    UpdatePromocodeDto:
      type: object
      properties: {}
    Bot:
      type: object
      properties: {}
    BotCreateRequestBody:
      type: object
      properties:
        isTemplate:
          type: boolean
          example: 'false'
          description: ''
        icon:
          type: string
          example: >-
            https://cdn.icon-icons.com/icons2/1233/PNG/512/1492718766-vk_83600.png
        title:
          type: string
          example: Создание заказов
          description: ''
        description:
          type: string
          example: Бот для создания заказов
        features:
          type: array
          example:
            - Создание заказов
            - Редактирование заказов
        messenger:
          type: object
          example:
            name: VK
            pages:
              - vk.com/club1245321223
            accessKey: 1685494522:AAHzRs4YFqckLvBVARVoUL0c3B1GFqlDpo
            url: www.some-url.com
        settings:
          type: object
          example:
            settings:
              Приветствие: Я бот-автоответчик
              Инлайн_кнопка: Текст кнопки
      required:
        - isTemplate
        - title
        - messenger
        - settings
    CreateTemplateDto:
      type: object
      properties:
        icon:
          type: string
          example: >-
            https://cdn.icon-icons.com/icons2/1233/PNG/512/1492718766-vk_83600.png
        title:
          type: string
          example: Бот Автоответчик
        description:
          type: string
          example: Бот для создания заказов
        features:
          type: object
        settings:
          type: object
          example:
            Приветствие: Я бот для создания заказов
            Инлайн_кнопка: Текст кнопки
        type:
          type: string
        isToPublish:
          type: boolean
      required:
        - title
    UpdateTemplateDto:
      type: object
      properties:
        icon:
          type: string
          example: >-
            https://cdn.icon-icons.com/icons2/1233/PNG/512/1492718766-vk_83600.png
        title:
          type: string
          example: Бот Автоответчик
        description:
          type: string
          example: Бот для создания заказов
        features:
          type: object
        settings:
          type: object
        isToPublish:
          type: boolean
    ShareBotDto:
      type: object
      properties:
        email:
          type: string
          description: Email зарегистрированного пользователя
          example: test@test.ru
      required:
        - email
    Messenger:
      type: object
      properties: {}
    CopyBotDto:
      type: object
      properties:
        messengers:
          type: array
          items:
            $ref: '#/components/schemas/Messenger'
    Statistics:
      type: object
      properties: {}
    ObjectId:
      type: object
      properties: {}
    FromWhom:
      type: object
      properties:
        profileId:
          description: id отправителя
          nullable: false
          allOf:
            - $ref: '#/components/schemas/ObjectId'
      required:
        - profileId
    ToWhom:
      type: object
      properties:
        fromId:
          description: id получателя
          nullable: false
          allOf:
            - $ref: '#/components/schemas/ObjectId'
      required:
        - fromId
    CreateNotificationDto:
      type: object
      properties:
        fromWhom:
          description: id отправителя
          nullable: false
          allOf:
            - $ref: '#/components/schemas/FromWhom'
        toWhom:
          description: id получателя
          nullable: false
          allOf:
            - $ref: '#/components/schemas/ToWhom'
        message:
          type: object
          description: содержимое
          nullable: false
      required:
        - fromWhom
        - toWhom
        - message
    Notification:
      type: object
      properties:
        fromWhom:
          description: id отправителя
          nullable: false
          allOf:
            - $ref: '#/components/schemas/FromWhom'
        toWhom:
          description: id получателя
          nullable: false
          allOf:
            - $ref: '#/components/schemas/ToWhom'
        message:
          type: object
          description: содержание
          nullable: false
        isReceived:
          type: boolean
          description: Статус получения
          nullable: false
      required:
        - fromWhom
        - toWhom
        - message
        - isReceived
    UpdateNotificationDto:
      type: object
      properties:
        message:
          type: string
          example: Изменены настройки бота
        isReceived:
          type: boolean
          example: false
